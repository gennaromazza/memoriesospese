import { useState, useEffect, useCallback } from "react";
import { useParams, useLocation } from "wouter";
import { collection, query, where, getDocs, doc, getDoc, addDoc, updateDoc, serverTimestamp, orderBy, limit, startAfter } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { useStudio } from "@/context/StudioContext";
import { trackGalleryView } from "@/lib/analytics";
import { createUrl } from "@/lib/basePath";
import Navigation from "@/components/Navigation";
import ImageLightbox from "@/components/ImageLightbox";
import { useToast } from "@/hooks/use-toast";
import { Skeleton } from "@/components/ui/skeleton";
import SimpleChaptersView from "@/components/SimpleChaptersView";
import { WeddingImage } from '@/components/WeddingImages';
import { Loader2 as Loader2Icon, Calendar as CalendarIcon, MapPin as MapPinIcon } from "lucide-react";
import { formatDateString } from "@/lib/dateFormatter";

interface GalleryData {
  id: string;
  name: string;
  date: string;
  location: string;
  description?: string;
  coverImageUrl?: string;
  youtubeUrl?: string;
  hasChapters?: boolean;
}

interface PhotoData {
  id: string;
  name: string;
  url: string;
  contentType: string;
  size: number;
  createdAt: any;
  chapterId?: string | null;
  chapterPosition?: number;
}

interface ChapterData {
  id: string;
  title: string;
  description?: string;
  position: number;
}

// Funzione per estrarre l'ID del video da un URL di YouTube
function getYouTubeVideoId(url: string): string {
  try {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return (match && match[2].length === 11) ? match[2] : "";
  } catch (error) {
    console.error("Errore nell'analisi dell'URL di YouTube:", error);
    return "";
  }
}

export default function Gallery() {
  const { id } = useParams();
  const [, navigate] = useLocation();
  const [gallery, setGallery] = useState<GalleryData | null>(null);
  const [photos, setPhotos] = useState<PhotoData[]>([]);
  const [chapters, setChapters] = useState<ChapterData[]>([]);
  const [activeTab, setActiveTab] = useState<string>("all");
  const [isLoading, setIsLoading] = useState(true);
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [hasMorePhotos, setHasMorePhotos] = useState(true);
  const [loadingMorePhotos, setLoadingMorePhotos] = useState(false);
  const [photosPerPage, setPhotosPerPage] = useState(20); // Carica 20 foto alla volta
  const { toast } = useToast();
  const { studioSettings } = useStudio();
  const [isAdmin, setIsAdmin] = useState(false);
  
  useEffect(() => {
    // Controlla se l'utente è un amministratore
    const checkAdmin = () => {
      const admin = localStorage.getItem('isAdmin') === 'true';
      setIsAdmin(admin);
    };
    
    checkAdmin();
  }, []);
  
  useEffect(() => {
    async function fetchGallery() {
      // Check if user is authenticated for this gallery or is admin
      const isAuth = localStorage.getItem(`gallery_auth_${id}`);
      if (!isAuth && !isAdmin) {
        navigate(createUrl(`/access/${id}`));
        return;
      }

      setIsLoading(true);
      try {
        // Fetch gallery
        const galleriesRef = collection(db, "galleries");
        const q = query(galleriesRef, where("code", "==", id));
        const querySnapshot = await getDocs(q);
        
        if (querySnapshot.empty) {
          toast({
            title: "Galleria non trovata",
            description: "La galleria richiesta non esiste o è stata rimossa.",
            variant: "destructive",
          });
          navigate(createUrl("/"));
          return;
        }
        
        const galleryDoc = querySnapshot.docs[0];
        const galleryData = galleryDoc.data();
        setGallery({
          id: galleryDoc.id,
          name: galleryData.name,
          date: galleryData.date,
          location: galleryData.location,
          description: galleryData.description || "",
          coverImageUrl: galleryData.coverImageUrl || "",
          youtubeUrl: galleryData.youtubeUrl || "",
          hasChapters: galleryData.hasChapters || false
        });
        
        // Cerchiamo sempre i capitoli, indipendentemente dal flag hasChapters
        console.log("Cerco capitoli per galleria ID:", galleryDoc.id);
        try {
          const chaptersRef = collection(db, "galleries", galleryDoc.id, "chapters");
          const chaptersQuery = query(chaptersRef, orderBy("position", "asc"));
          const chaptersSnapshot = await getDocs(chaptersQuery);
          
          if (!chaptersSnapshot.empty) {
            const chaptersData = chaptersSnapshot.docs.map(doc => ({
              id: doc.id,
              ...doc.data()
            })) as ChapterData[];
            
            // Aggiorniamo hasChapters nella gallery locale se troviamo capitoli
            if (chaptersData.length > 0 && !galleryData.hasChapters) {
              setGallery(prev => prev ? {...prev, hasChapters: true} : null);
              
              // Aggiorniamo anche il documento in Firestore se necessario
              try {
                const galleryRef = doc(db, "galleries", galleryDoc.id);
                await updateDoc(galleryRef, {
                  hasChapters: true
                });
                console.log("Aggiornato stato hasChapters della galleria");
              } catch (updateError) {
                console.error("Errore nell'aggiornamento di hasChapters:", updateError);
              }
            }
            
            setChapters(chaptersData);
            console.log(`Caricati ${chaptersData.length} capitoli`);
          } else {
            console.log("Nessun capitolo trovato per questa galleria");
          }
        } catch (chaptersError) {
          console.error("Errore nel caricamento dei capitoli:", chaptersError);
        }
        
        // Fetch photos for the gallery with pagination
        const photosRef = collection(db, "galleries", galleryDoc.id, "photos");
        let photosQuery;
        
        // Create query based on hasChapters with pagination
        if (galleryData.hasChapters) {
          photosQuery = query(
            photosRef, 
            orderBy("chapterPosition", "asc"),
            limit(photosPerPage)
          );
        } else {
          photosQuery = query(
            photosRef,
            limit(photosPerPage)
          );
        }
        
        const photosSnapshot = await getDocs(photosQuery);
        
        let photosData = photosSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        })) as PhotoData[];
        
        // Controlla se ci sono altre foto da caricare
        setHasMorePhotos(photosData.length >= photosPerPage);
        
        // Se non ci sono foto nella sottocollezione "photos" ma è indicato che ci sono foto (photoCount > 0),
        // potrebbe essere che le foto siano state caricate nello Storage ma i metadati non siano stati salvati
        // in Firestore. In questo caso, tentiamo di recuperare le foto dallo Storage.
        if (photosData.length === 0 && galleryData.photoCount > 0) {
          console.log("Nessuna foto trovata nella sottocollezione, ma photoCount è", galleryData.photoCount);
          console.log("Tentativo di recupero dallo Storage...");
          
          try {
            // Importiamo ciò che serve da firebase/storage
            const { ref, listAll, getDownloadURL, getMetadata } = await import("firebase/storage");
            const { storage } = await import("@/lib/firebase");
            
            // Percorso nella cartella di Storage per questa galleria
            const storageRef = ref(storage, `galleries/${galleryDoc.id}`);
            
            console.log("Verifico percorso Storage:", `galleries/${galleryDoc.id}`);
            
            // Elenca tutti i file nella cartella
            let listResult = await listAll(storageRef);
            
            // Se non ci sono file, prova percorsi alternativi
            if (listResult.items.length === 0) {
              console.log("Nessun file trovato, provo percorsi alternativi");
              
              // Prova con un possibile spazio nel path (come indicato dall'utente)
              const pathWithSpace = ref(storage, `galleries/ ${galleryDoc.id}`);
              console.log("Provo con path con spazio:", `galleries/ ${galleryDoc.id}`);
              try {
                const spaceResult = await listAll(pathWithSpace);
                if (spaceResult.items.length > 0) {
                  console.log("Trovate", spaceResult.items.length, "foto con path con spazio");
                  listResult = spaceResult;
                }
              } catch (e) {
                console.log("Errore con path con spazio:", e);
              }
            }
            
            // Per ogni file, recupera l'URL di download e i metadati
            const photoPromises = listResult.items.map(async (itemRef) => {
              const url = await getDownloadURL(itemRef);
              const metadata = await getMetadata(itemRef);
              
              // Crea oggetto foto
              return {
                id: itemRef.name, // Usa il nome del file come ID
                name: itemRef.name,
                url: url,
                contentType: metadata.contentType || 'image/jpeg',
                size: metadata.size || 0,
                createdAt: metadata.timeCreated || new Date().toISOString()
              };
            });
            
            // Attendiamo tutte le promise
            const photosFromStorage = await Promise.all(photoPromises);
            
            // Aggiorniamo i dati delle foto
            if (photosFromStorage.length > 0) {
              photosData = photosFromStorage;
              console.log("Recuperate", photosFromStorage.length, "foto dallo Storage");
              
              // Salvare i metadati in Firestore per usi futuri
              photosFromStorage.forEach(async (photo) => {
                try {
                  await addDoc(photosRef, {
                    name: photo.name,
                    url: photo.url,
                    contentType: photo.contentType,
                    size: photo.size,
                    createdAt: serverTimestamp()
                  });
                  console.log("Salvati metadati in Firestore per", photo.name);
                } catch (err) {
                  console.error("Errore nel salvare i metadati in Firestore:", err);
                }
              });
            }
          } catch (storageError) {
            console.error("Errore nel recupero dallo Storage:", storageError);
          }
        }
        
        setPhotos(photosData);
      } catch (error) {
        console.error("Error fetching gallery:", error);
        toast({
          title: "Errore",
          description: "Si è verificato un errore nel caricamento della galleria.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchGallery();
  }, [id]);

  const openLightbox = (index: number) => {
    setCurrentPhotoIndex(index);
    setLightboxOpen(true);
  };

  const closeLightbox = () => {
    setLightboxOpen(false);
  };

  const handleSignOut = () => {
    localStorage.removeItem(`gallery_auth_${id}`);
    navigate(createUrl("/"));
  };
  
  // Funzione per caricare più foto quando l'utente scorre verso il basso
  const loadMorePhotos = useCallback(async () => {
    if (!gallery || !hasMorePhotos || loadingMorePhotos) return;
    
    setLoadingMorePhotos(true);
    try {
      const photosRef = collection(db, "galleries", gallery.id, "photos");
      let photosQuery;
      
      // Create query based on hasChapters with pagination and startAfter
      if (gallery.hasChapters) {
        // Se ci sono capitoli, ordinare per posizione nel capitolo
        // Usa startAfter per caricare dalla foto successiva all'ultima caricata
        if (photos.length > 0) {
          const lastPhoto = photos[photos.length - 1];
          const lastPhotoRef = doc(db, "galleries", gallery.id, "photos", lastPhoto.id);
          const lastPhotoDoc = await getDoc(lastPhotoRef);
          
          photosQuery = query(
            photosRef, 
            orderBy("chapterPosition", "asc"),
            startAfter(lastPhotoDoc),
            limit(photosPerPage)
          );
        } else {
          photosQuery = query(
            photosRef, 
            orderBy("chapterPosition", "asc"),
            limit(photosPerPage)
          );
        }
      } else {
        // Se non ci sono capitoli, usa l'ID come ordinamento predefinito o un altro campo adeguato
        if (photos.length > 0) {
          const lastPhoto = photos[photos.length - 1];
          const lastPhotoRef = doc(db, "galleries", gallery.id, "photos", lastPhoto.id);
          const lastPhotoDoc = await getDoc(lastPhotoRef);
          
          photosQuery = query(
            photosRef,
            startAfter(lastPhotoDoc),
            limit(photosPerPage)
          );
        } else {
          photosQuery = query(
            photosRef,
            limit(photosPerPage)
          );
        }
      }
      
      const photosSnapshot = await getDocs(photosQuery);
      
      if (!photosSnapshot.empty) {
        const newPhotosData = photosSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        })) as PhotoData[];
        
        // Aggiungi le nuove foto all'array esistente
        setPhotos(prevPhotos => [...prevPhotos, ...newPhotosData]);
        
        // Verifica se ci sono ancora altre foto da caricare
        setHasMorePhotos(newPhotosData.length >= photosPerPage);
      } else {
        setHasMorePhotos(false);
      }
    } catch (error) {
      console.error("Errore nel caricamento di altre foto:", error);
      toast({
        title: "Errore",
        description: "Si è verificato un errore nel caricamento di altre foto.",
        variant: "destructive",
      });
    } finally {
      setLoadingMorePhotos(false);
    }
  }, [gallery, hasMorePhotos, loadingMorePhotos, photos, photosPerPage]);
  
  // Utilizza trackGalleryView per tracciare la visualizzazione della galleria
  useEffect(() => {
    if (gallery) {
      trackGalleryView(gallery.id, gallery.name);
    }
  }, [gallery]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-sage-50">
        <Navigation galleryOwner={gallery?.name} />
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex items-center space-x-4 mb-8">
            <Skeleton className="h-12 w-40" />
            <Skeleton className="h-12 w-32" />
          </div>
          
          <div className="space-y-4">
            <Skeleton className="h-64 w-full rounded-lg" />
            
            <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2 sm:gap-4 lg:gap-6">
              {Array.from({ length: 8 }).map((_, index) => (
                <Skeleton key={index} className="h-40 sm:h-52 lg:h-64 rounded-md" />
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!gallery) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Galleria non trovata</h1>
          <p className="mb-4">La galleria che stai cercando non esiste o è stata rimossa.</p>
          <button 
            className="px-4 py-2 bg-sage-600 text-white rounded-md hover:bg-sage-700"
            onClick={() => navigate(createUrl("/"))}
          >
            Torna alla Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-sage-50 pb-12">
      <Navigation galleryOwner={gallery.name} />
      
      <main>
        {/* Hero section */}
        <div className="bg-white shadow-sm border-b border-sage-100">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              <div>
                <h1 className="text-2xl sm:text-3xl font-playfair font-bold text-blue-gray-900">{gallery.name}</h1>
                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-6 mt-2 text-blue-gray-600">
                  {gallery.date && (
                    <div className="flex items-center gap-1.5">
                      <CalendarIcon className="h-4 w-4 text-sage-600" />
                      <span className="text-sm sm:text-base">{formatDateString(gallery.date)}</span>
                    </div>
                  )}
                  
                  {gallery.location && (
                    <div className="flex items-center gap-1.5">
                      <MapPinIcon className="h-4 w-4 text-sage-600" />
                      <span className="text-sm sm:text-base">{gallery.location}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            {gallery.description && (
              <div className="mt-4">
                <p className="text-gray-700 italic">{gallery.description}</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Video YouTube se presente */}
        {gallery.youtubeUrl && gallery.youtubeUrl.trim() !== "" && (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-8 mt-6">
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-4">Video del matrimonio</h3>
              <div className="relative w-full pb-[56.25%]">
                <iframe 
                  src={`https://www.youtube.com/embed/${getYouTubeVideoId(gallery.youtubeUrl)}`}
                  title="Video del matrimonio"
                  className="absolute top-0 left-0 w-full h-full rounded-lg"
                  frameBorder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                ></iframe>
              </div>
            </div>
          </div>
        )}
        
        {/* Contenuto principale - con visualizzazione capitoli */}
        <div className="max-w-7xl mx-auto sm:px-6 lg:px-8 mt-6">
          <div className="px-4 py-4">
            {/* Utilizzando SimpleChaptersView per mostrare capitoli e foto */}
            <SimpleChaptersView 
              chapters={chapters}
              photos={photos}
              openLightbox={openLightbox}
            />
            
            {/* Caricamento di altre foto */}
            {hasMorePhotos && (
              <div className="flex justify-center mt-8">
                <button
                  onClick={loadMorePhotos}
                  disabled={loadingMorePhotos}
                  className="flex items-center justify-center px-4 py-2 bg-sage-600 text-white rounded-md hover:bg-sage-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loadingMorePhotos ? (
                    <>
                      <Loader2Icon className="animate-spin h-4 w-4 mr-2" />
                      Caricamento...
                    </>
                  ) : (
                    'Carica altre foto'
                  )}
                </button>
              </div>
            )}
          </div>
        </div>
      </main>
      
      {/* Lightbox per visualizzare le foto a schermo intero */}
      <ImageLightbox
        isOpen={lightboxOpen}
        onClose={closeLightbox}
        photos={photos}
        initialIndex={currentPhotoIndex}
      />
    </div>
  );
}